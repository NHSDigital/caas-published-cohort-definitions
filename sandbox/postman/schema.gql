# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type ActivityLog {
  comment: String!
  id: ID!
  type: String!
  when: DateTime!
  who: String!
}

"""
A Code is an individual clinical term. It might be a SNOMED code or an ICD-10 code etc.
"""
type Code {
  """
  Coding Systems include, SNOMED, ICD-10, OPCS etc. A coding system provides codes for representing Clinical Terms.
  """
  codeSystem: CodeSystem!
  id: String!

  """A description of this clinical term"""
  shortDescription: String!

  """The value representing the clinical term"""
  value: String!
}

"""
A Code List aggregates individual Codes into logical groupings of codes. These are used to identify patients to be included in a Cohort (and in some instances people to be excluded)
"""
type CodeList {
  """
  If this Code List is a PCD Refset then this holds the Cluster ID e.g. AST_COD
  """
  clusterName: String

  """
  Coding Systems include, SNOMED, ICD-10, OPCS etc. A coding system provides codes for representing Clinical Terms.
  """
  codeSystem: CodeSystem

  """
  A Code is an individual clinical term. It might be a SNOMED code or an ICD-10 code etc.
  """
  codes: [Code!]

  """The UUID used to identify the Code List in the backend"""
  id: String!

  """
  A text description used to describe the Code List - Note: this is used when articulating business logic in Explorer
  """
  shortDescription: String!
}

"""
Coding Systems include, SNOMED, ICD-10, OPCS etc. A coding system provides codes for representing Clinical Terms.
"""
type CodeSystem {
  """The UUID used to identify the Coding System in the backend"""
  id: String!

  """The name of the coding system"""
  name: String!
}

"""
At the top the level the Cohort element captures elements of the Cohort such as its name,
  commissioner and a summary of what the cohort is. A Cohort has multiple Condition Groups.
  It may also have some age constraint which applies to the whole Cohort.
"""
type Cohort {
  """The individuals or groups responsible for creating the cohort"""
  authors: String!

  """Text to display in Explorer in the 'Clinical at risk groups' section"""
  clinicalAtRiskGroupsText: String!

  """The individual or group that commissioned this Cohort"""
  commissioner: String!

  """
  A Condition Group brings together a number of related Conditions into one high level concept
      such as 'Chronic Heart Disease'. It doesn't have many attributes of it's own but does have multiple Conditions.
      Clinical Policy often uses Condition Groups to articulate who should belong to a Cohort.
  """
  conditionGroups: [ConditionGroup!]

  """Text to display in Explorer in the 'Demographics' section"""
  demographicsText: String!

  """A verbose description of what this Cohort is"""
  description: String!

  """Text to display in Explorer in the 'Disclaimer' section"""
  disclaimerText: String!

  """
  A date specific to this Cohort which Event Date Constraints in the business logic are in reference to
  """
  fixedDateReference: String

  """The UUID used to identify the cohort in the backend"""
  id: ID!

  """The last time this cohort was changed as an ISO string"""
  lastUpdated: String!

  """The full name for this Cohort"""
  name: String!

  """
  This constrains the people identified to be within certain age limits. This might be used to find people over 5 years of age.
  """
  patientAgeConstraint: PatientAgeConstraint

  """The purpose of this Cohort"""
  purpose: String!

  """A shortened name for this Cohort"""
  shortName: String!

  """A short summary description for this Cohort"""
  summary: String!

  """A URL friendly name for this Cohort for use on Web Page URLs"""
  urlSlug: String!
}

union CohortSearchResult = Cohort | ErrorDescription

"""
A Condition represents a focused set of clinical 'conditions' such as
  "Asthma that requires continuous or repeated use of inhaled or systemic steroids."
  This is often used in Clinical Policy to more clearly identify the scope of a Condition Group.
  A Condition is Composed of multiple Rule Sets which contain the specific business rules used to identify people that have this Condition.
  The 'non-digital-pathway' attribute identifies limitations of the Rules in the Rulesets to capture people that have this condition.
"""
type Condition {
  """A description of the Condition, often informed by related Policy"""
  description: String

  """The UUID used to identify the Condition in the backend"""
  id: String!

  """
  Groups of people identified by the related Policy but failed to be digitally captured for any reason
  """
  nonDigitalPathwayText: String

  """
  A Rule Set is a logical entity which composes 'Rules' with either a logical AND or OR. It allows more complex rules to be created.
  """
  rulesets: [Ruleset!]
}

"""
A Condition Group brings together a number of related Conditions into one high level concept
  such as 'Chronic Heart Disease'. It doesn't have many attributes of it's own but does have multiple Conditions.
  Clinical Policy often uses Condition Groups to articulate who should belong to a Cohort.
"""
type ConditionGroup {
  """
  A Condition represents a focused set of clinical 'conditions' such as
      "Asthma that requires continuous or repeated use of inhaled or systemic steroids."
      This is often used in Clinical Policy to more clearly identify the scope of a Condition Group.
      A Condition is Composed of multiple Rule Sets which contain the specific business rules used to identify people that have this Condition.
      The 'non-digital-pathway' attribute identifies limitations of the Rules in the Rulesets to capture people that have this condition.
  """
  conditions: [Condition!]

  """The UUID used to identify the Condition Group in the backend"""
  id: ID!

  """The last time this condition group was changed as an ISO string"""
  lastUpdated: String!

  """Text to display in condition group page title"""
  name: String!

  """
  Text to display in Explorer in the 'Non Digital Pathway Overview' section
  """
  nonDigitalPathwayOverview: String!

  """Text to display in Explorer in the 'Rule Logic Overview' section"""
  ruleLogicOverview: String!

  """
  Summary field to the ConditionGroup. When this is encountered the CG Page can just display the summary text and skip any other content
  """
  summary: String

  """A URL friendly name for this Condition Group for use on Web Page URLs"""
  urlSlug: String!
}

"""Dataset"""
type Dataset {
  """Dataset - acronym"""
  acronym: String

  """Dataset - description"""
  description: String
  id: String!

  """Dataset - name"""
  name: String

  """Dataset - url"""
  url: String
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

"""Describes why an API request has failed"""
type ErrorDescription {
  """A numeric code for the failure type"""
  code: String

  """Used to help identify messages which caused this error"""
  correlationId: String

  """A description of the failure"""
  errorDescription: String
}

"""
This constrains the number of times an event within the patient journal has occurred.
  This might be to identify people who have had a treatment at least 4 times.
"""
type EventCountConstraint {
  """The event, or events must have occurred at least this number of times"""
  count: Int!
}

"""
This constrains the date when the patient journal event occurred. This might be to identify people who had a certain treatment in the last two years.
"""
type EventDateConstraint {
  """
  The recorded journal event must have been no earlier than this fixed date
  """
  fixedEarliestDate: DateTime

  """
  The recorded journal event must have been no later than this fixed date
  """
  fixedLatestDate: DateTime

  """
  The recorded journal event must have been no earlier than this date relative to the Cohort fixed date
  """
  relativeEarliestTime: Int

  """
  The recorded journal event must have been no later than this date relative to the Cohort fixed date
  """
  relativeLatestTime: Int

  """The recorded journal event must have been within the previous N months"""
  withinLastMonths: Int
}

"""
This constrains the people identified to be within certain age limits. This might be used to find people over 5 years of age.
"""
type PatientAgeConstraint {
  """The maximum age of a person to be eligible for inclusion"""
  maxAgeMonths: Int

  """The minimum age of a person to be eligible for inclusion"""
  minAgeMonths: Int
}

"""
Some conditions do not fit well in the model and are handled as special cases. This included Morbid Obesity. The terms pre and post coordinated can be read about here https://blog.clinicalarchitecture.com/informatics-lingo-pre-and-post-coordinated-terms
"""
type PreCoordinatedConstraint {
  id: String!

  """PreCoordinatedConstraintType"""
  preCoordinatedConstraintType: PreCoordinatedConstraintType!
}

"""PreCoordinatedConstraintType"""
type PreCoordinatedConstraintType {
  id: String!
  name: String!
  rulesetText: String!
}

type Query {
  PublishedCohortLibraryGetAll: [Cohort!]!
  PublishedCohortLibraryGetBySlugName(urlSlug: String!): CohortSearchResult!
}

"""
Patient medical journals record when people are diagnosed with a condition but also when they no longer have a condition. This is referred to as 'Resolved' codes. This constraint excludes people when a condition has been resolved by the presence of a Resolved code after the respective Diagnosis code. It references a Code List defining the codes which resolve the condition.
"""
type ResolvedConstraint {
  id: String!
}

"""
A Rule composes a collection of Code Lists with a number of 'constraints' (e.g. people over 5 years of age) which act together to control which people are captured.
"""
type Rule {
  """
  A Code List aggregates individual Codes into logical groupings of codes. These are used to identify patients to be included in a Cohort (and in some instances people to be excluded)
  """
  codeListInclusions: [CodeList!]

  """
  A Code List aggregates individual Codes into logical groupings of codes. These are used to identify patients to be included in a Cohort (and in some instances people to be excluded)
  """
  codeListsResolving: [CodeList!]

  """Rule - DatasetInclusion"""
  datasetInclusion: [Dataset!]

  """Rule - Dataset"""
  datasets: [Dataset!]

  """
  This constrains the number of times an event within the patient journal has occurred.
      This might be to identify people who have had a treatment at least 4 times.
  """
  eventCountConstraint: EventCountConstraint

  """
  This constrains the date when the patient journal event occurred. This might be to identify people who had a certain treatment in the last two years.
  """
  eventDateConstraint: EventDateConstraint
  id: String!

  """
  This constrains the people identified to be within certain age limits. This might be used to find people over 5 years of age.
  """
  patientAgeConstraints: [PatientAgeConstraint!]

  """
  Some conditions do not fit well in the model and are handled as special cases. This included Morbid Obesity. The terms pre and post coordinated can be read about here https://blog.clinicalarchitecture.com/informatics-lingo-pre-and-post-coordinated-terms
  """
  preCoordinatedConstraints: [PreCoordinatedConstraint!]
}

"""
A Rule Set is a logical entity which composes 'Rules' with either a logical AND or OR. It allows more complex rules to be created.
"""
type Ruleset {
  id: String!

  """
  Shows whether the associated rules should be logically ANDed or ORed together
  """
  logicallyAndRules: Boolean

  """
  A Rule composes a collection of Code Lists with a number of 'constraints' (e.g. people over 5 years of age) which act together to control which people are captured.
  """
  rules: [Rule!]
}