parameters:
    - name: full
      type: boolean
      default: false
    - name: test_command
      type: string
      default: "make test"
    - name: smoketest_command
      type: string
      default: "make smoketest"
    - name: functionaltest_command
      type: string
      default: "make functionaltest"

steps:
    - template: "azure/components/aws-assume-role.yml@common"
      parameters:
          role: "auto-ops"
          profile: "apm_ptl"

    - bash: |
          make install-python
      workingDirectory: $(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)
      displayName: Setup pytests
      condition: always()

    - ${{ if parameters.full }}:
          # In order to run tests in prod you must supply the unique ID of an Apigee app
          # that has authorized access to your service proxy.
          - bash: |
                export PROXY_NAME="$(FULLY_QUALIFIED_SERVICE_NAME)"
                export APIGEE_ACCESS_TOKEN="$(secret.AccessToken)"
                export APIGEE_APP_ID="MY APP ID"
                export STATUS_ENDPOINT_API_KEY="$(STATUS_ENDPOINT_API_KEY)"
                export SOURCE_COMMIT_ID="$(Build.SourceVersion)"
                ${{ parameters.test_command }}
            workingDirectory: $(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)
            displayName: Run full test suite
          - task: PublishTestResults@2
            displayName: "Publish test results"
            condition: always()
            inputs:
                testResultsFiles: "$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/test-report.xml"
                failTaskOnFailedTests: true
    - ${{ if not(parameters.full) }}:
          # In order to run tests in prod you must supply the unique ID of an Apigee app
          # that has authorized access to your service proxy.
          - template: "azure/components/get-aws-secrets-and-ssm-params.yml@common"
            parameters:
                secret_ids:
                    - ptl/api-deployment/caas-published-cohort-definitions/INTEGRATION_API_KEY
          - bash: |
                export PROXY_NAME="$(FULLY_QUALIFIED_SERVICE_NAME)"
                export APIGEE_ACCESS_TOKEN="$(secret.AccessToken)"
                export APIGEE_APP_ID="MY APP ID"
                export STATUS_ENDPOINT_API_KEY="$(STATUS_ENDPOINT_API_KEY)"
                export SOURCE_COMMIT_ID="$(Build.SourceVersion)"
                export INTEGRATION_API_KEY="$(INTEGRATION_API_KEY)"
                ${{ parameters.smoketest_command }}
            workingDirectory: $(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)
            displayName: Run smoketests
          - task: PublishTestResults@2
            displayName: "Publish smoketest results"
            condition: always()
            inputs:
                testResultsFiles: "$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/smoketest-report.xml"
                failTaskOnFailedTests: true
    - ${{ if not(parameters.full) }}:
          - template: "azure/components/get-aws-secrets-and-ssm-params.yml@common"
            parameters:
                secret_ids:
                    - ptl/api-deployment/caas-published-cohort-definitions/INTEGRATION_API_KEY
          - bash: |
                export PROXY_NAME="$(FULLY_QUALIFIED_SERVICE_NAME)"
                export APIGEE_ACCESS_TOKEN="$(secret.AccessToken)"
                export APIGEE_APP_ID="MY APP ID"
                export STATUS_ENDPOINT_API_KEY="$(STATUS_ENDPOINT_API_KEY)"
                export SOURCE_COMMIT_ID="$(Build.SourceVersion)"
                export INTEGRATION_API_KEY="$(INTEGRATION_API_KEY)"
                ${{ parameters.functionaltest_command }}
            workingDirectory: $(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)
            displayName: Run functionaltest
          - task: PublishTestResults@2
            displayName: "Publish functionaltest results"
            condition: always()
            inputs:
                testResultsFiles: "$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/functionaltest-report.xml"
                failTaskOnFailedTests: true
